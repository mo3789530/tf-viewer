{"version":3,"sources":["components/Header.tsx","components/Input.tsx","libs/parse.ts","libs/sanitizer.tsx","components/View.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MenuAppBar","react","Box","sx","flexGrow","AppBar","position","Toolbar","Typography","variant","component","InputFilde","props","style","width","TextField","id","label","multiline","rows","value","onChange","handleChange","fullWidth","TF_PREFIX","+","-","~","NEST_OPEN_TOKEN","[","{","NEST_CLOSE_TOKEN","]","}","titleHtml","input","cssClass","wrapperClass","test","concat","View","tf","inputArray","split","isBlock","nesttedCSS","Array","map","line","prefix","index","length","c","charAt","getPrefix","suffix","getSuffix","console","log","push","pop","undefined","join","parse","replace","dangerouslySetInnerHTML","__html","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setValue","react_default","a","createElement","Header","Input_InputFilde","event","debug","target","View_View","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.b65817ea.chunk.js","sourcesContent":["import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\nconst MenuAppBar = () => {\n  return (\n    <Box sx={{ flexGrow: 1 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            TF-viewer\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </Box>\n  );\n};\n\n\nexport default MenuAppBar;\n","import { TextField } from '@mui/material';\nimport * as React from 'react';\n\nexport const InputFilde = (props: any) => {\n  return (\n    <div style={{width: \"50%\"}}>\n        <TextField\n          id=\"plan-text\"\n          label=\"Terraform plan\"\n          multiline\n          rows={100}\n          value={props.value}\n          onChange={props.handleChange}\n          fullWidth={true}\n        />\n    </div>\n  );\n}","interface Symbol {\n  [key: string]: string;\n}\n\ninterface NestedSymbol {\n  [key: string]: boolean;\n}\n\nconst TF_PREFIX: Symbol = {\n  \"+\": \"tf-result--add\",\n  \"-\": \"tf-result--destory\",\n  \"~\": \"tf-result--update\",\n};\n\nconst NEST_OPEN_TOKEN: NestedSymbol = {\n  \"[\": true,\n  \"{\": true,\n};\n\nconst NEST_CLOSE_TOKEN: NestedSymbol = {\n  \"]\": true,\n  \"}\": true,\n};\n\nexport const parse = (input: string) => {\n  const inputArray = input.split(\"\\n\");\n  let isBlock = false;\n\n  let nesttedCSS: Array<string> = new Array<string>();\n  const parsedInput = inputArray.map((line) => {\n\n    const prefix = getPrefix(line);\n    const suffix = getSuffix(line);\n    if (\n      !isBlock &&\n      !prefix &&\n      /(will|must) be/.test(line) &&\n      !nesttedCSS.length\n    ) {\n      isBlock = false;\n      return \"</div>\"\n    } \n    else if (!isBlock && prefix == \"#\" && /(will|must) be/.test(line)) {\n      isBlock = true;\n    }\n    else if(!prefix && !suffix && !nesttedCSS.length) {\n        isBlock = false;\n    }\n\n\n    // Title CSS\n    if (prefix === \"#\" && /(will|must) be/.test(line)) {\n      return isBlock ? \"</div>\" + titleHtml(line) : titleHtml(line);\n    }\n\n    let cssClass: string | undefined = \"\";\n\n    if (line == \"\") return \"\";\n\n    console.log(line);\n    console.log(isBlock);\n\n    // Get body CSS\n    if (isBlock) {\n      if (/resource /.test(line)) {\n        cssClass = \"tf-result--resource-info\";\n      } else {\n        cssClass = TF_PREFIX[prefix];\n      }\n      if (NEST_OPEN_TOKEN[suffix]) {\n        nesttedCSS.push(cssClass);\n      } else if (NEST_CLOSE_TOKEN[prefix]) {\n        cssClass = nesttedCSS.pop();\n      }\n      if (cssClass == undefined) return \"\";\n      return `<pre class=\"tf-result ${cssClass}\">${line}</pre>`;\n    }\n    return \"\";\n  });\n  return parsedInput.join(\"\");\n};\n\nfunction getPrefix(input: string) {\n  for (let index = 0; index < input.length; index++) {\n    const c = input.charAt(index);\n    if (c != \" \") {\n      return c;\n    }\n  }\n  return \"\";\n}\n\nfunction getSuffix(input: string) {\n  for (let index = input.length - 1; index >= 0; index--) {\n    const c = input.charAt(index);\n    if (c != \",\") {\n      return c;\n    }\n  }\n  return \"\";\n}\n\nfunction titleHtml(input: string) {\n  let cssClass = \"tf-title\"\n  let wrapperClass = \"tf-div\"\n  switch (true) {\n    case /(will|must) be created/.test(input):\n      cssClass = \"tf-title tf-title--create\";\n      wrapperClass = \"tf-div\";\n      break;\n    case /(will|must) be updated in-place/.test(input):\n      cssClass = \"tf-title tf-title--update\";\n      wrapperClass = \"tf-div\";\n      break;\n    case /(will|must) be destroyed/.test(input):\n      cssClass = \"tf-title tf-title--destroy\";\n      wrapperClass = \"tf-div\";\n      break;\n    default:\n      wrapperClass = \"tf-div\";\n      break;\n  }\n  return `<div class=\"${wrapperClass}\"><span class=\"${cssClass}\">${input}</span>`\n}\n","export const sanitizer = (input: string) => {\n    const sanitizeRegexp = /<\\/*[a-z]*>/g\n    return input.replace(sanitizeRegexp, \"\")\n}","import * as React from 'react';\nimport { parse } from '../libs/parse';\nimport { sanitizer } from '../libs/sanitizer';\nimport '../App.css';\n\n\nexport const View = (props: any) => {\n  const sanitized = sanitizer(props.value);\n  \n  const tf = parse(sanitized);\n  return (\n    <div style={{width: \"50%\"}}>\n        <div dangerouslySetInnerHTML={{__html: tf}}></div>\n    </div>\n  )\n\n}","import React from 'react';\nimport './App.css';\nimport MenuAppBar from './components/Header';\nimport { InputFilde } from './components/Input';\nimport { View } from './components/View';\n\nfunction App() {\n\n  const [value, setValue] = React.useState('');\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.debug(event.target.value);\n    setValue(event.target.value);\n  };\n  return (\n    <div>\n      <MenuAppBar />\n      <div>\n        <InputFilde value={value} handleChange={handleChange} />\n        <View value={value}/>\n      </div>\n\n    </div>\n\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}